buildscript {
    repositories {
        maven {
            name = "MinecraftForge"
            url = uri("https://maven.minecraftforge.net/")
        }
        maven {
            name = "SpongePowered"
            url = uri("https://repo.spongepowered.org/maven/")
        }

        mavenCentral()
    }

    dependencies {
        classpath(group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true)
        classpath("org.spongepowered:mixingradle:0.7-SNAPSHOT")
    }
}

plugins {
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("com.diffplug.spotless") version "6.10.0"
}

apply(plugin: "net.minecraftforge.gradle")
apply(plugin: "org.spongepowered.mixin")

group = "me.ramidzkh"
version = (System.getenv("APPBOT_VERSION") ?: "0.0.0").replace("forge/", "")

repositories {
    maven {
        name = "Modmaven"
        url = uri("https://modmaven.dev/")

        content {
            includeGroup("appeng")
        }
    }

    maven {
        name = "Cursemaven"
        url = uri("https://cursemaven.com")

        content {
            includeGroup("curse.maven")
        }
    }

    maven {
        name = "Jared"
        url = uri("https://maven.blamejared.com/")

        content {
            includeGroup("vazkii.botania")
            includeGroup("vazkii.patchouli")
        }
    }

    maven {
        name = "theillusivec4"
        url = uri("https://maven.theillusivec4.top/")

        content {
            includeGroup("top.theillusivec4.curios")
        }
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")

    implementation(fg.deobf("appeng:appliedenergistics2:${ae2_version}"))
    implementation(fg.deobf("vazkii.botania:Botania:${minecraft_version}-${botania_version}"))

    runtimeOnly(fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}"))
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}"))
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

processResources {
    inputs.property("version", project.version)
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    exclude(".cache")
    from("LICENSE")

    filesMatching("META-INF/mods.toml") {
        expand("version": project.version)
    }
}

jar {
    finalizedBy("reobfJar")

    from(sourceSets.main.output.classesDirs)
    from(sourceSets.main.output.resourcesDir)

    manifest {
        attributes([
                "Specification-Title"     : "Applied Botanics",
                "Specification-Vendor"    : "ramidzkh",
                "Specification-Version"   : "${project.version}",
                "Implementation-Title"    : "${project.name}",
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "ramidzkh",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "appbot.mixins.json"
        ])
    }
}

////////////////////
// Forge/Minecraft
minecraft {
    mappings(channel: "official", version: "${minecraft_version}")

    /**
     * Configures properties common to all run configurations
     */
    def commonRunProperties = {
        workingDirectory(project.file("run"))

        property("forge.logging.console.level", "debug")
        property("fml.earlyprogresswindow", "false")
        jvmArgs("--add-opens", "java.base/sun.security.util=ALL-UNNAMED")
        jvmArgs("--add-opens", "java.base/java.util.jar=ALL-UNNAMED")

        // See https://github.com/Vazkii/Patchouli#mixin-troubleshooting
        property("mixin.env.remapRefMap", "true")
        property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
        // property "mixin.debug.export", "true"

        args("-mixin.config=appbot.mixins.json")

        mods {
            appbot {
                source(sourceSets.main)
            }
        }
    }

    runs {
        client {
            with(commonRunProperties)
        }

        server {
            with(commonRunProperties)
        }

        data {
            with(commonRunProperties)
            // ForgeGradle will just force-exit the Gradle Daemon which fails our builds in case
            // a daemon is used for any reason.
            forceExit false
            args("--mod", "appbot", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources"))
        }
    }
}

mixin {
    add sourceSets.main, "appbot.mixins.refmap.json"
}

/////////////
// Spotless
spotless {
    java {
        target("src/main/java/**/*.java")

        endWithNewline()
        indentWithSpaces()
        removeUnusedImports()
        toggleOffOn()
        eclipse().configFile("codeformat/codeformat.xml")
        importOrderFile("codeformat/ae2.importorder")
    }

    format("json") {
        target("src/main/resources/**/*.json")
        targetExclude("src/generated/resources/**")
        prettier().config(parser: "json")
    }
}

////////////////
// CurseForge
System.getenv("CURSEFORGE")?.with { String key ->
    curseforge {
        apiKey = key

        project {
            id = "610632"
            changelogType = "markdown"
            changelog = "View changelog at [the release page](https://github.com/ramidzkh/Applied-Botanics/releases/tag/${version})"

            if (version.contains("alpha")) {
                releaseType = "alpha"
            } else if (version.contains("beta")) {
                releaseType = "beta"
            } else {
                releaseType = "release"
            }

            addGameVersion("${minecraft_version}")
            addGameVersion("Forge")

            mainArtifact(jar) {
                displayName = "${project.version} [FORGE]"

                relations {
                    requiredDependency("applied-energistics-2")
                    requiredDependency("botania")
                }
            }
        }
    }
}
