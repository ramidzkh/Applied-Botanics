plugins {
    id("fabric-loom") version "1.0-SNAPSHOT"
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("com.diffplug.spotless") version "6.12.1"
    id("com.modrinth.minotaur") version "2.5.0"
}

group = "me.ramidzkh"
version = System.getenv("APPBOT_VERSION") ?: "0.0.0"

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modmaven"
                url = uri("https://modmaven.dev/")
            }
        }

        filter {
            includeGroup("appeng")
            includeGroup("vazkii.botania")
            includeGroup("vazkii.patchouli")
            includeGroup("mezz.jei")
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Ladysnake Libs"
                url = uri("https://ladysnake.jfrog.io/artifactory/mods/")
            }
        }

        filter {
            includeGroup("dev.onyxstudios.cardinal-components-api")
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "TerraformersMC"
                url = uri("https://maven.terraformersmc.com/")
            }
        }

        filter {
            includeGroup("dev.emi")
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "JamiesWhiteShirt"
                url = uri("https://maven.jamieswhiteshirt.com/libs-release/")
            }
        }

        filter {
            includeGroup("com.jamieswhiteshirt")
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Jitpack"
                url = uri("https://jitpack.io/")
            }
        }

        filter {
            includeGroup("com.github.emilyploszaj")
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = uri("https://api.modrinth.com/maven")
            }
        }

        filter {
            includeGroup("maven.modrinth")
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "shedaniel"
                url = uri("https://maven.shedaniel.me/")
            }
        }

        filter {
            includeGroup("dev.architectury")
            includeGroup("me.shedaniel")
            includeGroup("me.shedaniel.cloth")
        }
    }
}

dependencies {
    minecraft("net.minecraft:minecraft:${minecraft_version}")
    mappings(loom.officialMojangMappings())
    modImplementation("net.fabricmc:fabric-loader:${loader_version}")

    modImplementation("appeng:appliedenergistics2-fabric:${ae2_version}")
    modImplementation("vazkii.botania:Botania:${minecraft_version}-${botania_version}")

    modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}") {
        transitive = false
    }

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

loom {
    runs {
        create("data") {
            client()

            configName = "Data Generation"
            runDir = "build/data"

            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}")
            vmArg("-Dfabric-api.datagen.strict-validation")
            vmArg("-Dfabric-api.datagen.modid=appbot")
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

processResources {
    inputs.property("version", project.version)
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from("LICENSE")
    exclude(".cache")

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

/////////////
// Spotless
spotless {
    java {
        target("src/main/java/**/*.java")

        endWithNewline()
        indentWithSpaces()
        removeUnusedImports()
        toggleOffOn()
        eclipse().configFile("codeformat/codeformat.xml")
        importOrderFile("codeformat/ae2.importorder")
    }

    format("json") {
        target("src/main/resources/**/*.json")
        prettier().config(parser: "json")
    }
}

////////////////
// CurseForge
System.getenv("CURSEFORGE")?.with { String key ->
    curseforge {
        apiKey = key

        project {
            id = "610632"
            changelogType = "markdown"
            changelog = "View changelog at [the release page](https://github.com/ramidzkh/Applied-Botanics/releases/tag/${version})"

            if (version.contains("alpha")) {
                releaseType = "alpha"
            } else if (version.contains("beta")) {
                releaseType = "beta"
            } else {
                releaseType = "release"
            }

            addGameVersion("${minecraft_version}")
            addGameVersion("Fabric")

            mainArtifact(remapJar) {
                displayName = "${project.version} [FABRIC]"

                relations {
                    requiredDependency("applied-energistics-2")
                    requiredDependency("botania-fabric")
                }
            }
        }
    }
}

////////////////
// Modrinth
modrinth {
    token.set(System.getenv("MODRINTH"))
    projectId.set("applied-botanics")
    changelog.set("View changelog at [the release page](https://github.com/ramidzkh/Applied-Botanics/releases/tag/${version})")
    versionNumber.set("${project.version}-fabric")
    versionName.set("${project.version} [FABRIC]")

    if (version.contains("alpha")) {
        versionType.set("alpha")
    } else if (version.contains("beta")) {
        versionType.set("beta")
    } else {
        versionType.set("release")
    }

    uploadFile.set(remapJar)
    gameVersions.add(minecraft_version)

    dependencies {
        required.project("ae2")
        required.project("botania")
    }
}

tasks.modrinth.onlyIf {
    System.getenv("MODRINTH")
}
